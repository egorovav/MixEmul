* MIXEMUL LOADER PROGRAM
*
* Note: negative word values are those with a least significant digit character 
* value under 30. This means space to I can be used for negative numbers.
* Contrary to the original loader program, this program also supports negative
* addresses, to allow programs to be loaded into the control region of the 
* memory. Of course, MixEmul must already be in Control mode for this to work.
*
* rI1: index of current word value address read from the current information card, 
*      respective to the first word value read from the card.
* rI3: target memory address indexer.
* rI4: buffer indexer, value always 16. Its sole purpose is preventing potential 
*      unprintable characters
*
BUFF	EQU  32			Buffer area 0048-0063. 
	ORIG 0
VAL16	IN   16(16)		Read second loader card.
	JBUS *(16)		Wait till reading finishes.
LOC	IN   32(16)		Read third loader card.
	JBUS *(16)		Wait till reading finishes.
	LD4  VAL16(0:2)		rI4 <- 16
READ	IN   BUFF,4(16)		Read (next) information card.	
	LD1  VAL16(0:2)		rI1 <- 16.
	JBUS *(16)		Wait till reading finishes.
	LDA  BUFF+1,4(5:5)	rA <- least significant digit of start/target address.
	SUB  VAL30(0:2)		rA now negative if least significant digit represents negative sign.
	STA  LOC(0:0)		Save sign of least significant digit.
	LDA  BUFF+1,4		rA <- start address columns (6-10).
VAL1	SLA  1			shift rA left 1...
	SRAX 6			...then 6 right into rX (to avoid unprintables).
VAL30	NUM  30			rA <- numeric value of start address columns.
	STA  LOC(1:5)		LOC <- start address.
* SECOND CARD
	LDA  BUFF+1,4(1:1)	rA <- counter column (6).
	SUB  VAL30(0:2)         rA <- counter column numeric value.
LOOP	LD3  LOC		rI3 <- LOC (start address).
	JAZ  0,3		Jump if transition card (counter == 0).
	STA  BUFF,4		BUFF <- counter column.
	LDA  LOC                rA <- current address.
	ADD  VAL1(0:2)		rA <- rA + 1.
	STA  LOC		LOC <- next address.
	LDA  BUFF+3,1(5:5)	rA <- least significant digit of current word value.
	SUB  VAL30(0:2)		rA now negative if least significant digit represents negative sign.
	STA  0,3(0:0)		Save sign of least significant digit
	LDA  BUFF+2,1		rA <- first half of current word value
	LDX  BUFF+3,1		rX <- second half of current word value
	NUM  0			rA <- numeric value of current word value
	STA  0,3(1:5)		Save absolute value.
	MOVE 0,1(2)		Move rI1 to next word value (MOVE used to prevent potential unprintables).
* THIRD CARD
	LDA  BUFF,4		rA <- BUFF (counter column)
	SUB  VAL1(0:2)		rA <- rA - 1
	JAP  LOOP		Repeat until counter == 0.
	JMP  READ		Read next card.
	END  VAL16